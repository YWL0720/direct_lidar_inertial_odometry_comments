// Generated by gencpp from file direct_lidar_inertial_odometry/save_pcdRequest.msg
// DO NOT EDIT!


#ifndef DIRECT_LIDAR_INERTIAL_ODOMETRY_MESSAGE_SAVE_PCDREQUEST_H
#define DIRECT_LIDAR_INERTIAL_ODOMETRY_MESSAGE_SAVE_PCDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace direct_lidar_inertial_odometry
{
template <class ContainerAllocator>
struct save_pcdRequest_
{
  typedef save_pcdRequest_<ContainerAllocator> Type;

  save_pcdRequest_()
    : leaf_size(0.0)
    , save_path()  {
    }
  save_pcdRequest_(const ContainerAllocator& _alloc)
    : leaf_size(0.0)
    , save_path(_alloc)  {
  (void)_alloc;
    }



   typedef float _leaf_size_type;
  _leaf_size_type leaf_size;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _save_path_type;
  _save_path_type save_path;





  typedef boost::shared_ptr< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct save_pcdRequest_

typedef ::direct_lidar_inertial_odometry::save_pcdRequest_<std::allocator<void> > save_pcdRequest;

typedef boost::shared_ptr< ::direct_lidar_inertial_odometry::save_pcdRequest > save_pcdRequestPtr;
typedef boost::shared_ptr< ::direct_lidar_inertial_odometry::save_pcdRequest const> save_pcdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator1> & lhs, const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.leaf_size == rhs.leaf_size &&
    lhs.save_path == rhs.save_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator1> & lhs, const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace direct_lidar_inertial_odometry

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a003751e1806c213c7a86bef08fa5bba";
  }

  static const char* value(const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa003751e1806c213ULL;
  static const uint64_t static_value2 = 0xc7a86bef08fa5bbaULL;
};

template<class ContainerAllocator>
struct DataType< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "direct_lidar_inertial_odometry/save_pcdRequest";
  }

  static const char* value(const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 leaf_size\n"
"string save_path\n"
;
  }

  static const char* value(const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leaf_size);
      stream.next(m.save_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct save_pcdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::direct_lidar_inertial_odometry::save_pcdRequest_<ContainerAllocator>& v)
  {
    s << indent << "leaf_size: ";
    Printer<float>::stream(s, indent + "  ", v.leaf_size);
    s << indent << "save_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.save_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIRECT_LIDAR_INERTIAL_ODOMETRY_MESSAGE_SAVE_PCDREQUEST_H
